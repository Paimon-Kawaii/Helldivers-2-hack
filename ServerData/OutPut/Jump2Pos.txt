// Auto reconstructed from vtable block @ 0x00CA8CE0
// from "server_srv.so", by ida_vtables.idc
0	CBasePlayer::~CBasePlayer()
1	CBaseEntity::SetRefEHandle(CBaseHandle const&)
2	CBaseEntity::GetRefEHandle(void)const
3	CBaseEntity::GetCollideable(void)
4	CBaseEntity::GetNetworkable(void)
5	CBaseEntity::GetBaseEntity(void)
6	CBaseEntity::GetModelIndex(void)const
7	CBaseEntity::GetModelName(void)const
8	CBaseEntity::SetModelIndex(int)
9	CBasePlayer::GetServerClass(void)
10	CBasePlayer::YouForgotToImplementOrDeclareServerClass(void)
11	CBasePlayer::GetDataDescMap(void)
12	CBaseCombatCharacter::GetScriptDesc(void)
13	CBaseEntity::ScriptGetModelName(void)const
14	CBaseEntity::GetAIAddOn(void)const
15	CBaseAnimating::TestCollision(Ray_t const&,unsigned int,CGameTrace &)
16	CBaseAnimating::TestHitboxes(Ray_t const&,unsigned int,CGameTrace &)
17	CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector *,Vector *)
18	CBaseEntity::ShouldCollide(int,int)const
19	CBaseEntity::SetOwnerEntity(CBaseEntity*)
20	CBasePlayer::ShouldTransmit(CCheckTransmitInfo const*)
21	CBasePlayer::UpdateTransmitState(void)
22	CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo *,bool)
23	CBasePlayer::GetTracerType(void)
24	CBasePlayer::Spawn(void)
25	CBaseEntity::ShouldPrecache(void)
26	CBasePlayer::Precache(void)
27	CBasePlayer::SetModel(char const*)
28	CBaseEntity::InitSharedVars(void)
29	CBaseEntity::PostConstructor(char const*)
30	CBaseEntity::PostClientActive(void)
31	CBaseEntity::OnParseMapDataFinished(void)
32	CBaseEntity::KeyValue(char const*,char const*)
33	CBaseEntity::KeyValue(char const*,float)
34	CBaseEntity::KeyValue(char const*,Vector const&)
35	CBaseEntity::GetKeyValue(char const*,char *,int)
36	CBasePlayer::Activate(void)
37	CBaseEntity::SetParent(CBaseEntity*,int)
38	CBaseEntity::SetStasis(bool)
39	CBaseEntity::IsInStasis(void)const
40	CBasePlayer::ObjectCaps(void)
41	CBaseEntity::GetUsePriority(CBaseEntity*)
42	CBaseEntity::GetGlowEntity(void)
43	CBaseEntity::GetUseType(CBaseEntity*)
44	CBaseEntity::AcceptInput(char const*,CBaseEntity*,CBaseEntity*,variant_t,int)
45	CBasePlayer::GetPlayerName(void)const
46	CBasePlayer::DrawDebugGeometryOverlays(void)
47	CBaseAnimating::DrawDebugTextOverlays(void)
48	CBasePlayer::Save(ISave &)
49	CBasePlayer::Restore(IRestore &)
50	CBasePlayer::ShouldSavePhysics(void)
51	CBaseEntity::OnSave(IEntitySaveUtils *)
52	CBasePlayer::OnRestore(void)
53	CBasePlayer::GetDemoRecordingState(KeyValues *)
54	CBasePlayer::RequiredEdictIndex(void)
55	CBaseEntity::MoveDone(void)
56	CBaseEntity::Think(void)
57	CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void)
58	CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void *)
59	CBaseAnimating::GetBaseAnimating(void)
60	CBaseAnimatingOverlay::GetBaseAnimatingOverlay(void)
61	CBaseEntity::GetResponseSystem(void)
62	CBaseEntity::DispatchResponse(char const*)
63	CBasePlayer::Classify(void)
64	CBaseEntity::DeathNotice(CBaseEntity*)
65	CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
66	CBaseEntity::GetAutoAimRadius(void)
67	CBaseEntity::GetAutoAimCenter(void)
68	CBaseEntity::GetBeamTraceFilter(void)
69	CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
70	CBasePlayer::TraceAttack(CTakeDamageInfo const&,Vector const&,CGameTrace *)
71	CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
72	CBasePlayer::OnTakeDamage(CTakeDamageInfo const&)
73	CBasePlayer::TakeHealth(float,int)
74	CBaseEntity::IsAlive(void)const
75	CBasePlayer::Event_Killed(CTakeDamageInfo const&)
76	CBasePlayer::Event_KilledOther(CBaseEntity *,CTakeDamageInfo const&)
77	CBaseCombatCharacter::BloodColor(void)
78	CBaseEntity::IsTriggered(CBaseEntity*)
79	CBaseEntity::IsNPC(void)const
80	CBaseCombatCharacter::MyCombatCharacterPointer(void)
81	CBaseEntity::MyNextBotPointer(void)
82	CBaseEntity::MyInfectedPointer(void)
83	CBaseEntity::GetDelay(void)
84	CBaseEntity::IsMoving(void)
85	CBaseEntity::DamageDecal(int,int)
86	CBaseEntity::DecalTrace(CGameTrace *,char const*)
87	CBaseEntity::ImpactTrace(CGameTrace *,int,char *)
88	CBaseEntity::OnControls(CBaseEntity*)
89	CBaseEntity::HasTarget(string_t)
90	CBasePlayer::IsPlayer(void)const
91	CBasePlayer::IsNetClient(void)const
92	CBaseEntity::IsTemplate(void)
93	CBaseEntity::IsBaseObject(void)const
94	CBaseEntity::IsBaseTrain(void)const
95	CBaseEntity::IsElevator(void)const
96	CBaseEntity::IsBaseCombatWeapon(void)const
97	CBaseEntity::MyCombatWeaponPointer(void)
98	CBaseEntity::GetServerVehicle(void)
99	CBaseEntity::IsViewable(void)
100	CBasePlayer::ChangeTeam(int)
101	CBaseEntity::OnEntityEvent(EntityEvent_t,void *)
102	CBaseEntity::CanStandOn(CBaseEntity*)const
103	CBaseEntity::CanStandOn(edict_t *)const
104	CBaseEntity::GetEnemy(void)
105	CBaseEntity::GetEnemy(void)const
106	CBaseEntity::Use(CBaseEntity*,CBaseEntity*,USE_TYPE,float)
107	CBaseEntity::StartTouch(CBaseEntity*)
108	CBasePlayer::Touch(CBaseEntity *)
109	CBaseEntity::EndTouch(CBaseEntity*)
110	CBaseEntity::StartBlocked(CBaseEntity*)
111	CBaseEntity::Blocked(CBaseEntity*)
112	CBaseEntity::EndBlocked(void)
113	CBasePlayer::PhysicsSimulate(void)
114	CBaseEntity::PhysicsLandedOnGround(float)
115	CBasePlayer::UpdateOnRemove(void)
116	CBaseEntity::StopLoopingSounds(void)
117	CBaseEntity::SUB_AllowedToFade(void)
118	CBaseFlex::Teleport(Vector const*,QAngle const*,Vector const*)
119	CBaseEntity::NotifySystemEvent(CBaseEntity*,notify_system_event_t,notify_system_event_params_t const&)
120	CBasePlayer::MakeTracer(Vector const&,CGameTrace const&,int)
121	CBaseEntity::GetTracerAttachment(void)
122	CBaseEntity::FireBullets(FireBulletsInfo_t const&)
123	CBasePlayer::DoImpactEffect(CGameTrace &,int)
124	CBaseEntity::Respawn(void)
125	CBaseEntity::IsLockedByMaster(void)
126	CBaseEntity::GetMaxHealth(void)const
127	CBaseAnimating::ModifyOrAppendCriteria(AI_CriteriaSet &)
128	CBaseEntity::ModifyOrAppendDerivedCriteria(AI_CriteriaSet &)
129	CBaseEntity::NetworkStateChanged_m_iMaxHealth(void)
130	CBaseEntity::NetworkStateChanged_m_iMaxHealth(void *)
131	CBasePlayer::NetworkStateChanged_m_iHealth(void)
132	CBasePlayer::NetworkStateChanged_m_iHealth(void *)
133	CBasePlayer::NetworkStateChanged_m_lifeState(void)
134	CBasePlayer::NetworkStateChanged_m_lifeState(void *)
135	CBaseEntity::NetworkStateChanged_m_takedamage(void)
136	CBaseEntity::NetworkStateChanged_m_takedamage(void *)
137	CBaseEntity::GetDamageType(void)const
138	CBaseEntity::GetDamage(void)
139	CBaseEntity::SetDamage(float)
140	CBasePlayer::EyePosition(void)
141	CBasePlayer::EyeAngles(void)
142	CBasePlayer::LocalEyeAngles(void)
143	CBaseEntity::EarPosition(void)
144	CBasePlayer::BodyTarget(Vector const&,bool)
145	CBaseEntity::HeadTarget(Vector const&)
146	CBaseEntity::GetVectors(Vector *,Vector *,Vector *)const
147	CBaseEntity::GetViewOffset(void)const
148	CBaseEntity::SetViewOffset(Vector const&)
149	CBasePlayer::GetSmoothedVelocity(void)
150	CBaseAnimating::GetVelocity(Vector *,Vector *)
151	CBaseEntity::GetFriction(void)const
152	CBaseCombatCharacter::FVisible(CBaseEntity *,int,CBaseEntity **)
153	CBaseCombatCharacter::FVisible(Vector const&,int,CBaseEntity **)
154	CBaseEntity::CanBeSeenBy(CAI_BaseNPC *)
155	CBaseEntity::GetAttackDamageScale(CBaseEntity*)
156	CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
157	CBaseEntity::OnGroundChanged(CBaseEntity*,CBaseEntity*)
158	CBaseEntity::GetGroundVelocityToApply(Vector &)
159	CBaseEntity::PhysicsSplash(Vector const&,Vector const&,float,float)
160	CBaseEntity::Splash(void)
161	CBaseEntity::WorldSpaceCenter(void)const
162	CBaseEntity::GetSoundEmissionOrigin(void)const
163	CBaseEntity::CreateVPhysics(void)
164	CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
165	CBasePlayer::VPhysicsDestroyObject(void)
166	CBasePlayer::VPhysicsUpdate(IPhysicsObject *)
167	CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
168	CBaseCombatCharacter::VPhysicsShadowCollision(int,gamevcollisionevent_t *)
169	CBasePlayer::VPhysicsShadowUpdate(IPhysicsObject *)
170	CBasePlayer::VPhysicsCollision(int,gamevcollisionevent_t *)
171	CBaseEntity::VPhysicsFriction(IPhysicsObject *,float,int,int)
172	CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
173	CBaseEntity::VPhysicsGetObjectList(IPhysicsObject **,int)
174	CBaseEntity::VPhysicsIsFlesh(void)
175	CBaseEntity::CanPushEntity(CBaseEntity*)const
176	CBaseEntity::HasPhysicsAttacker(float)
177	CBasePlayer::PhysicsSolidMaskForEntity(void)const
178	CBaseEntity::ResolveFlyCollisionCustom(CGameTrace &,Vector &)
179	CBaseEntity::PerformCustomPhysics(Vector *,Vector *,QAngle *,QAngle *)
180	CBaseAnimating::GetStepOrigin(void)const
181	CBaseAnimating::GetStepAngles(void)const
182	CBaseEntity::ShouldDrawWaterImpacts(void)
183	CBasePlayer::NetworkStateChanged_m_fFlags(void)
184	CBasePlayer::NetworkStateChanged_m_fFlags(void *)
185	CBasePlayer::NetworkStateChanged_m_nWaterLevel(void)
186	CBasePlayer::NetworkStateChanged_m_nWaterLevel(void *)
187	CBasePlayer::NetworkStateChanged_m_hGroundEntity(void)
188	CBasePlayer::NetworkStateChanged_m_hGroundEntity(void *)
189	CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void)
190	CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void *)
191	CBasePlayer::NetworkStateChanged_m_flFriction(void)
192	CBasePlayer::NetworkStateChanged_m_flFriction(void *)
193	CBasePlayer::NetworkStateChanged_m_vecVelocity(void)
194	CBasePlayer::NetworkStateChanged_m_vecVelocity(void *)
195	CBaseEntity::NetworkStateChanged_m_bClientSideRagdoll(void)
196	CBaseEntity::NetworkStateChanged_m_bClientSideRagdoll(void *)
197	CBasePlayer::NetworkStateChanged_m_vecViewOffset(void)
198	CBasePlayer::NetworkStateChanged_m_vecViewOffset(void *)
199	CBaseEntity::RunVScripts(void)
200	CBaseAnimating::GetIdealSpeed(void)const
201	CBaseAnimating::GetIdealAccel(void)const
202	CBaseAnimatingOverlay::StudioFrameAdvance(void)
203	CBaseAnimating::ReachedEndOfSequence(void)
204	CBaseAnimating::OnSequenceSet(int)
205	CBaseAnimating::IsActivityFinished(void)
206	CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr *,int)
207	CBaseAnimating::SelectWeightedSequence(Activity)
208	CBaseAnimating::ClampRagdollForce(Vector const&,Vector*)
209	CBaseAnimating::BecomeRagdollOnClient(Vector const&)
210	CBaseAnimating::IsRagdoll(void)
211	CBaseAnimating::CanBecomeRagdoll(void)
212	CBaseAnimatingOverlay::GetSkeleton(CStudioHdr *,matrix3x4_t const&,Vector *,QuaternionAligned *,int)
213	CBaseAnimating::GetBoneTransform(int,matrix3x4_t &)
214	CBaseAnimating::SetupBones(matrix3x4_t *,int)
215	CBaseAnimating::CalculateIKLocks(float)
216	CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating *)
217	CBasePlayer::HandleAnimEvent(animevent_t *)
218	CBaseAnimating::PopulatePoseParameters(void)
219	CBaseAnimating::GetAttachment(int,matrix3x4_t &)
220	CBaseAnimating::InitBoneControllers(void)
221	CBaseAnimating::GetGroundSpeedVelocity(void)
222	CBaseAnimating::IsViewModel(void)const
223	CBaseAnimating::Ignite(float,bool,float,bool)
224	CBaseAnimating::IgniteLifetime(float)
225	CBaseAnimating::IgniteUseCheapEffect(bool)
226	CBaseAnimating::Extinguish(void)
227	CBaseAnimating::IsFrozen(void)
228	CBaseAnimating::Freeze(float,CBaseEntity *,Ray_t *)
229	CBaseAnimating::Unfreeze(void)
230	CBaseAnimating::Dissolve(char const*,float,bool,int,Vector,int)
231	CBaseAnimating::SetLightingOrigin(CBaseEntity *)
232	CBaseFlex::SetViewtarget(Vector const&)
233	CBaseFlex::StartSceneEvent(CSceneEventInfo *,CChoreoScene *,CChoreoEvent *,CChoreoActor *,CBaseEntity *)
234	CBaseFlex::ProcessSceneEvents(void)
235	CBaseFlex::ProcessSceneEvent(CSceneEventInfo *,CChoreoScene *,CChoreoEvent *)
236	CBaseFlex::ClearSceneEvent(CSceneEventInfo *,bool,bool)
237	CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo *,float,CChoreoScene *,CChoreoEvent *)
238	CBaseFlex::PlayScene(char const*,float,AI_Response *,IRecipientFilter *)
239	CBaseFlex::PlayAutoGeneratedSoundScene(char const*)
240	CBasePlayer::GetPhysicsImpactDamageTable(void)
241	CBaseCombatCharacter::FInViewCone(CBaseEntity *)
242	CBaseCombatCharacter::FInViewCone(Vector const&)
243	CBaseCombatCharacter::FInAimCone(CBaseEntity *)
244	CBaseCombatCharacter::FInAimCone(Vector const&)
245	CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
246	CBaseCombatCharacter::FindMissTarget(void)
247	CBaseCombatCharacter::HandleInteraction(int,void *,CBaseCombatCharacter*)
248	CBasePlayer::BodyAngles(void)
249	CBaseCombatCharacter::BodyDirection2D(void)
250	CBaseCombatCharacter::BodyDirection3D(void)
251	CBaseCombatCharacter::HeadDirection2D(void)
252	CBaseCombatCharacter::HeadDirection3D(void)
253	CBaseCombatCharacter::EyeDirection2D(void)
254	CBaseCombatCharacter::EyeDirection3D(void)
255	CBaseCombatCharacter::IsHiddenByFog(Vector const&)const
256	CBaseCombatCharacter::IsHiddenByFog(CBaseEntity *)const
257	CBaseCombatCharacter::IsHiddenByFog(float)const
258	CBaseCombatCharacter::GetFogObscuredRatio(Vector const&)const
259	CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity *)const
260	CBaseCombatCharacter::GetFogObscuredRatio(float)const
261	CBaseCombatCharacter::GetFogParams(fogparams_t *)const
262	CBaseCombatCharacter::IsLookingTowards(CBaseEntity const*,float)const
263	CBaseCombatCharacter::IsLookingTowards(Vector const&,float)const
264	CBaseCombatCharacter::IsInFieldOfView(CBaseEntity *)const
265	CBaseCombatCharacter::IsInFieldOfView(Vector const&)const
266	CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity *,CBaseCombatCharacter::LineOfSightCheckType)const
267	CBaseCombatCharacter::IsLineOfSightClear(Vector const&,CBaseCombatCharacter::LineOfSightCheckType,CBaseEntity *)const
268	CBaseCombatCharacter::OnFootstep(Vector const&,bool,bool)
269	CBaseCombatCharacter::GetGroundSurface(void)const
270	CBaseCombatCharacter::GetFootstepSound(char const*,bool,float,bool)const
271	CBaseCombatCharacter::AreFootstepsAudible(void)const
272	CBaseCombatCharacter::IsFootstepAudible(float,bool)const
273	CBaseCombatCharacter::GetFootstepRunThreshold(void)const
274	CBaseCombatCharacter::GiveAmmo(int,int,bool)
275	CBaseCombatCharacter::RemoveAmmo(int,int)
276	CBaseCombatCharacter::NPC_TranslateActivity(Activity)
277	CBaseCombatCharacter::Weapon_TranslateActivity(Activity,bool *)
278	CBaseCombatCharacter::Weapon_FrameUpdate(void)
279	CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t *)
280	CBasePlayer::Weapon_CanUse(CBaseCombatWeapon *)
281	CBasePlayer::Weapon_Equip(CBaseCombatWeapon *)
282	CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon *)
283	CBasePlayer::Weapon_Drop(CBaseCombatWeapon *,Vector const*,Vector const*)
284	CBasePlayer::Weapon_Switch(CBaseCombatWeapon *,int)
285	CBasePlayer::Weapon_ShootPosition(void)
286	CBaseCombatCharacter::Weapon_CanSwitchTo(CBaseCombatWeapon *)
287	CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon *)
288	CBaseCombatCharacter::Weapon_GetSlot(int)const
289	CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon *)
290	CBasePlayer::RemovePlayerItem(CBaseCombatWeapon *)
291	CBaseCombatCharacter::CanBecomeServerRagdoll(void)
292	CBasePlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
293	CBaseCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo const&)
294	CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo const&)
295	CBaseCombatCharacter::GetAliveDuration(void)const
296	CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*,CBaseEntity *)
297	CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity *)
298	CBaseCombatCharacter::HasEverBeenInjured(int)const
299	CBaseCombatCharacter::GetTimeSinceLastInjury(int)const
300	CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity *,CTakeDamageInfo const&)
301	CBaseCombatCharacter::GetDeathActivity(void)
302	CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
303	CBaseCombatCharacter::CorpseFade(void)
304	CBaseCombatCharacter::HasHumanGibs(void)
305	CBaseCombatCharacter::HasAlienGibs(void)
306	CBaseCombatCharacter::ShouldGib(CTakeDamageInfo const&)
307	CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
308	CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo const&)
309	CBasePlayer::Event_Dying(void)
310	CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&,Vector const&)
311	CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity *)
312	CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity *,Vector const&,float,int)
313	CBaseCombatCharacter::CheckTraceHullAttack(float,Vector const&,Vector const&,int,int,float,bool)
314	CBaseCombatCharacter::CheckTraceHullAttack(Vector const&,Vector const&,Vector const&,Vector const&,int,int,float,bool)
315	CBaseCombatCharacter::PushawayTouch(CBaseEntity *)
316	CBaseCombatCharacter::IRelationType(CBaseEntity *)
317	CBaseCombatCharacter::IRelationPriority(CBaseEntity *)
318	CBasePlayer::IsInAVehicle(void)const
319	CBasePlayer::GetVehicle(void)
320	CBasePlayer::GetVehicleEntity(void)
321	CBaseCombatCharacter::ExitVehicle(void)
322	CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon *)
323	CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon *,CBaseEntity *)
324	CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon *,CBaseEntity *)
325	CBasePlayer::DoMuzzleFlash(void)
326	CBaseCombatCharacter::AddEntityRelationship(CBaseEntity *,Disposition_t,int)
327	CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity *)
328	CBaseCombatCharacter::AddClassRelationship(Class_T,Disposition_t,int)
329	CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon *,CBaseCombatWeapon *)
330	CBaseCombatCharacter::GetLastKnownArea(void)const
331	CBaseCombatCharacter::IsAreaTraversable(CNavArea const*)const
332	CBaseCombatCharacter::ClearLastKnownArea(void)
333	CBaseCombatCharacter::UpdateLastKnownArea(void)
334	CBasePlayer::OnNavAreaChanged(CNavArea *,CNavArea *)
335	CBaseCombatCharacter::OnNavAreaRemoved(CNavArea *)
336	CBaseCombatCharacter::GetClass(void)const
337	CBaseCombatCharacter::CanBeA(ZombieClassType)const
338	CBaseCombatCharacter::OnHitByVomitJar(CBaseCombatCharacter*)
339	CBaseCombatCharacter::IsIT(void)const
340	CBaseCombatCharacter::OnPursuedBy(INextBot *)
341	CBasePlayer::IsGhost(void)const
342	CBasePlayer::NetworkStateChanged_m_iAmmo(void)
343	CBasePlayer::NetworkStateChanged_m_iAmmo(void *)
344	CBasePlayer::CreateViewModel(int)
345	CBasePlayer::SetupVisibility(CBaseEntity *,unsigned char *,int)
346	CBasePlayer::WantsLagCompensationOnEntity(CBaseEntity const*,CUserCmd const*,CBitVec<2048> const*)const
347	CBasePlayer::SharedSpawn(void)
348	CBasePlayer::ForceRespawn(void)
349	CBasePlayer::InitialSpawn(void)
350	CBasePlayer::InitHUD(void)
351	CBasePlayer::ShowViewPortPanel(char const*,bool,KeyValues *)
352	CBasePlayer::PlayerDeathThink(void)
353	CBasePlayer::Jump(void)
354	CBasePlayer::Duck(void)
355	CBasePlayer::Cough(CBasePlayer*)
356	CBasePlayer::PreThink(void)
357	CBasePlayer::PostThink(void)
358	CBasePlayer::DamageEffect(float,int)
359	CBasePlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
360	CBasePlayer::ShouldFadeOnDeath(void)
361	CBasePlayer::IsFakeClient(void)const
362	CBasePlayer::GetCharacterDisplayName(void)
363	CBasePlayer::GetPlayerMins(void)const
364	CBasePlayer::GetPlayerMaxs(void)const
365	CBasePlayer::UpdateCollisionBounds(void)
366	CBasePlayer::CalcRoll(QAngle const&,Vector const&,float,float)
367	CBasePlayer::PackDeadPlayerItems(void)
368	CBasePlayer::RemoveAllItems(bool)
369	CBasePlayer::IsRunning(void)const
370	CBasePlayer::Weapon_SetLast(CBaseCombatWeapon *)
371	CBasePlayer::Weapon_ShouldSetLast(CBaseCombatWeapon *,CBaseCombatWeapon *)
372	CBasePlayer::Weapon_ShouldSelectItem(CBaseCombatWeapon *)
373	CBasePlayer::HasUnlockableWeapons(int)
374	CBasePlayer::UpdateClientData(void)
375	CBasePlayer::UpdateBattery(void)
376	CBasePlayer::ExitLadder(void)
377	CBasePlayer::GetLadderSurface(Vector const&)
378	CBasePlayer::IsAbleToAutoCenterOnLadders(void)const
379	CBasePlayer::SetFlashlightEnabled(bool)
380	CBasePlayer::FlashlightIsOn(void)
381	CBasePlayer::FlashlightTurnOn(bool)
382	CBasePlayer::FlashlightTurnOff(bool)
383	CBasePlayer::IsIlluminatedByFlashlight(CBaseEntity *,float *)
384	CBasePlayer::UpdateStepSound(surfacedata_t *,Vector const&,Vector const&)
385	CBasePlayer::PlayStepSound(Vector &,surfacedata_t *,float,bool)
386	CBasePlayer::GetStepSoundVelocities(float *,float *)
387	CBasePlayer::SetStepSoundTime(stepsoundtimes_t,bool)
388	CBasePlayer::DeathSound(CTakeDamageInfo const&)
389	CBasePlayer::GetSoundscapeListener(void)
390	CBasePlayer::WeaponHasInfiniteAmmo(CBaseCombatWeapon *)
391	CBasePlayer::SetAnimation(PLAYER_ANIM)
392	CBasePlayer::OnMainActivityComplete(Activity,Activity)
393	CBasePlayer::OnMainActivityInterrupted(Activity,Activity)
394	CBasePlayer::ImpulseCommands(void)
395	CBasePlayer::CheatImpulseCommands(int)
396	CBasePlayer::ClientCommand(CCommand const&)
397	CBasePlayer::StartObserverMode(int)
398	CBasePlayer::StopObserverMode(void)
399	CBasePlayer::ModeWantsSpectatorGUI(int)
400	CBasePlayer::SetObserverMode(int)
401	CBasePlayer::GetObserverMode(void)
402	CBasePlayer::SetObserverTarget(CBaseEntity *)
403	CBasePlayer::ObserverUse(bool)
404	CBasePlayer::GetObserverTarget(void)
405	CBasePlayer::FindNextObserverTarget(bool)
406	CBasePlayer::GetNextObserverSearchStartPoint(bool)
407	CBasePlayer::PassesObserverFilter(CBaseEntity const*)
408	CBasePlayer::IsValidObserverTarget(CBaseEntity *)
409	CBasePlayer::CheckObserverSettings(void)
410	CBasePlayer::JumptoPosition(Vector const&,QAngle const&)
411	CBasePlayer::ForceObserverMode(int)
412	CBasePlayer::ResetObserverMode(void)
413	CBasePlayer::ValidateCurrentObserverTarget(void)
414	CBasePlayer::AttemptToExitFreezeCam(void)
415	CBasePlayer::WantsRoamingObserverMode(void)const
416	CBasePlayer::StartReplayMode(float,float,int)
417	CBasePlayer::StopReplayMode(void)
418	CBasePlayer::GetDelayTicks(void)
419	CBasePlayer::GetReplayEntity(void)
420	CBasePlayer::CreateCorpse(void)
421	CBasePlayer::EntSelectSpawnPoint(void)
422	CBasePlayer::GetInVehicle(IServerVehicle *,int)
423	CBasePlayer::LeaveVehicle(Vector const&,QAngle const&)
424	CBasePlayer::OnVehicleStart(void)
425	CBasePlayer::OnVehicleEnd(Vector &)
426	CBasePlayer::BumpWeapon(CBaseCombatWeapon *)
427	CBasePlayer::SelectLastItem(void)
428	CBasePlayer::SelectItem(char const*,int)
429	CBasePlayer::SelectItem(CBaseCombatWeapon *)
430	CBasePlayer::ItemPostFrame(void)
431	CBasePlayer::GiveNamedItem(char const*,int,bool,CBaseEntity *)
432	CBasePlayer::CheckTrainUpdate(void)
433	CBasePlayer::SetPlayerUnderwater(bool)
434	CBasePlayer::PlayWadeSound(void)
435	CBasePlayer::CanBreatheUnderwater(void)const
436	CBasePlayer::CanRecoverCurrentDrowningDamage(void)const
437	CBasePlayer::PlayerUse(CBaseEntity *)
438	CBasePlayer::PlayUseDenySound(void)
439	CBasePlayer::FindUseEntity(float,float,float,bool *,bool)
440	CBasePlayer::IsUseableEntity(CBaseEntity *,unsigned int)
441	CBasePlayer::OnUseEntity(CBaseEntity *,USE_TYPE)
442	CBasePlayer::PickupObject(CBaseEntity *,bool)
443	CBasePlayer::ForceDropOfCarriedPhysObjects(CBaseEntity *)
444	CBasePlayer::GetHeldObjectMass(IPhysicsObject *)
445	CBasePlayer::IsHoldingEntity(CBaseEntity *)
446	CBasePlayer::UpdateGeigerCounter(void)
447	CBasePlayer::GetAutoaimVector(float)
448	CBasePlayer::GetAutoaimVector(float,float)
449	CBasePlayer::GetAutoaimVector(float,float,float,AimResults *)
450	CBasePlayer::GetAutoaimVector(autoaim_params_t &)
451	CBasePlayer::ShouldAutoaim(void)
452	CBasePlayer::ForceClientDllUpdate(void)
453	CBasePlayer::ProcessUsercmds(CUserCmd *,int,int,int,bool)
454	CBasePlayer::PlayerRunCommand(CUserCmd *,IMoveHelper *)
455	CBasePlayer::ChangeTeam(int,bool,bool)
456	CBasePlayer::CanHearAndReadChatFrom(CBasePlayer*)
457	CBasePlayer::CanSpeak(void)
458	CBasePlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet &)
459	CBasePlayer::CheckChatText(char *,int)
460	CBasePlayer::CreateRagdollEntity(void)
461	CBasePlayer::ShouldAnnounceAchievement(void)
462	CBasePlayer::ForceChangeTeam(int)
463	CBasePlayer::IsFollowingPhysics(void)
464	CBasePlayer::InitVCollision(Vector const&,Vector const&)
465	CBasePlayer::UpdatePhysicsShadowToCurrentPosition(void)
466	CBasePlayer::Hints(void)
467	CBasePlayer::IsReadyToPlay(void)
468	CBasePlayer::IsReadyToSpawn(void)
469	CBasePlayer::ShouldGainInstantSpawn(void)
470	CBasePlayer::ResetPerRoundStats(void)
471	CBasePlayer::ResetScores(void)
472	CBasePlayer::EquipSuit(bool)
473	CBasePlayer::RemoveSuit(void)
474	CBasePlayer::OnUseEntityChanged(void)
475	CBasePlayer::CommitSuicide(bool,bool)
476	CBasePlayer::CommitSuicide(Vector const&,bool,bool)
477	CBasePlayer::IsBot(void)const
478	CBasePlayer::GetExpresser(void)
479	CBasePlayer::SpawnArmorValue(void)const
480	CBasePlayer::UpdateTonemapController(void)
481	CBasePlayer::NetworkStateChanged_m_ArmorValue(void)
482	CBasePlayer::NetworkStateChanged_m_ArmorValue(void *)
483	CBasePlayer::IsAutoCrouched(void)const
484	CBasePlayer::GetAvailableSteadyStateSlots(void)
485	CBasePlayer::OnSpeak(CBasePlayer*,char const*,float)
486	CBasePlayer::OnVoiceTransmit(void)
487	CBasePlayer::PlayerSolidMask(bool)const
